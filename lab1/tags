!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	makefile	/^CC:=g++$/;"	m
CFLAGS	makefile	/^CFLAGS:='-std=c99'$/;"	m
DEFAULT_OPT	main.cpp	10;"	d	file:
EMPTY_ERR	stack.h	8;"	d
FAIL	main.cpp	9;"	d	file:
NULL_PTR_ERR	stack.h	5;"	d
Node	main.cpp	/^typedef struct Node{$/;"	s	file:
Node	main.cpp	/^}Node;$/;"	t	typeref:struct:Node	file:
OVERFLOW	stack.h	7;"	d
RANGE_ERR	stack.h	6;"	d
STACK	stack.h	/^typedef struct STACK{$/;"	s
STACK	stack.h	/^}STACK;$/;"	t	typeref:struct:STACK
STACK_H	stack.h	2;"	d
SUCCESS	main.cpp	8;"	d	file:
TRUE	main.cpp	7;"	d	file:
assign	stack.cpp	/^STACK *const assign(STACK *const p, const STACK &s)$/;"	f
chooseStack	main.cpp	/^int chooseStack( Node *&ptr, Node *head)$/;"	f
destroySTACK	stack.cpp	/^void destroySTACK( STACK *const p )$/;"	f
elems	stack.h	/^	int *elems;$/;"	m	struct:STACK
exec	makefile	/^exec    := main$/;"	m
freeStacks	main.cpp	/^int freeStacks( Node *&ptr )$/;"	f
getelem	stack.cpp	/^int getelem( const STACK *const p, int x)$/;"	f
howMany	stack.cpp	/^int howMany( const STACK *const p )$/;"	f
initSTACK	stack.cpp	/^void initSTACK( STACK *const p, const STACK &s)$/;"	f
initSTACK	stack.cpp	/^void initSTACK(STACK *const p, int m)$/;"	f
main	main.cpp	/^int main()$/;"	f
max	stack.h	/^	int max;$/;"	m	struct:STACK
name	main.cpp	/^	char name[100];$/;"	m	struct:Node	file:
next	main.cpp	/^	Node *next;$/;"	m	struct:Node	file:
objs	makefile	/^objs    := $(sources:.c=.o)$/;"	m
pop	stack.cpp	/^STACK *const pop(STACK *const p, int &e)$/;"	f
pos	stack.h	/^	int pos;$/;"	m	struct:STACK
print	stack.cpp	/^void print( const STACK *const p)$/;"	f
prior	main.cpp	/^	Node *prior;$/;"	m	struct:Node	file:
push	stack.cpp	/^STACK *const push(STACK *const p, int e)$/;"	f
size	stack.cpp	/^int size( const STACK *const p)$/;"	f
sources	makefile	/^sources := main.c stack.c$/;"	m
stack	main.cpp	/^	STACK *stack;$/;"	m	struct:Node	file:
testAssign	main.cpp	/^int testAssign( Node *ptr, Node *head )$/;"	f
testDestroySTACK	main.cpp	/^int testDestroySTACK( Node *&ptr, Node *head )$/;"	f
testGetElem	main.cpp	/^int testGetElem( Node *ptr)$/;"	f
testHowMany	main.cpp	/^int testHowMany( Node *ptr )$/;"	f
testInitSTACKByCap	main.cpp	/^int testInitSTACKByCap(  Node *&ptr )$/;"	f
testInitSTACKkBySta	main.cpp	/^int testInitSTACKkBySta( Node *&ptr,  Node *head )$/;"	f
testPop	main.cpp	/^int testPop( Node *ptr )$/;"	f
testPrint	main.cpp	/^int testPrint( Node *ptr )$/;"	f
testPush	main.cpp	/^int testPush( Node *ptr)$/;"	f
testSize	main.cpp	/^int testSize( Node *ptr )$/;"	f
